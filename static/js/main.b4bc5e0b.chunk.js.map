{"version":3,"sources":["static/fullEarth.png","components/Header.js","components/NewsFilters.js","constants/apis.js","components/NewsFeed.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","fullEarth","alt","title","NewsFilters","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","name","target","setState","defineProperty","value","state","query","country","_this2","onSubmit","preventDefault","onFilterSubmit","type","placeholder","onChange","FilterList_default","Component","apis","proxy","tasteDive","endpoint","key","tmdb","omdb","newsApi","aylien","id","iex","publishedKey","secretKey","vantage","NewsFeed","articles","articlesWithSent","avgSentiment","fetchNews","axios","get","concat","params","apiKey","language","pageSize","q","newsApiResults","data","console","log","_context","t0","prevProps","prevState","length","articleSentimentSequence","targetArticle","headers","X-AYLIEN-TextAPI-Application-Key","X-AYLIEN-TextAPI-Application-ID","mode","text","articleSentiment","setStateArticles","_context2","articleWithSent","description","source","url","image","urlToImage","polarity","polarityConfidence","polarity_confidence","subjectivity","subjectivityConfidence","subjectivity_confidence","copyArticles","toConsumableArray","shift","copyArticlesWithSent","unshift","getAvgSentiment","setTimeout","_this3","renderedArticles","map","article","index","href","Math","floor","reduce","acc","cur","CircularProgress","color","style","left","components_NewsFilters","renderArticles","renderEmptyState","Footer","attributions","attr","author","githubUrl","App","components_Header","components_NewsFeed","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4bc5e0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fullEarth.f825cd40.png\";","import React from \"react\";\nimport fullEarth from \"../static/fullEarth.png\"; // import image of earth\n\nfunction Header(props) {\n    return (\n        <header className=\"headerComponent wrapper\">\n            <div className=\"earthContainer\">\n                <img className=\"earth\" src={fullEarth} alt=\"earth\" />\n            </div>\n            <h1>{props.title}</h1>\n            <h2>\n                Discover how <span className=\"positive\">positive</span>, <span className=\"negative\">negative</span>, or <span className=\"neutral\">neutral</span> top news headlines are around the world using AI\n            </h2>\n        </header>\n    )\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport FilterList from \"@material-ui/icons/FilterList\"; // import filter icon\n\nclass NewsFilters extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: \"\",\n            country: \"\"\n        }\n    }\n\n    // Update values for query and country inputs by adding into state upon any change\n    // Essential to creating a controlled component\n    handleChange = (event) => {\n        // Must grab name of input first because this method works on both text input and select input\n        const name = event.target.name;\n\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    // NOTE: If form is submitted, NewsFilters will update state of NewsFeed using passed in function!\n    render() {\n        return (\n            <div className=\"newsFiltersComponent wrapper\">\n                <form onSubmit={(event) => {\n                    event.preventDefault();\n                    this.props.onFilterSubmit(this.state.query, this.state.country);\n                }}>\n                    <input name=\"query\" type=\"text\" placeholder=\"Filter topic...\" value={this.state.query} onChange={this.handleChange} />\n                    \n                    <select name=\"country\" value={this.state.country} onChange={this.handleChange}>\n                        <option value=\"\">All Countries</option>\n                        <option value=\"us\">U.S.</option>\n                        <option value=\"gb\">U.K.</option>\n                        <option value=\"in\">India</option>\n                        <option value=\"ca\">Canada</option>\n                        <option value=\"au\">Australia</option>\n                        <option value=\"nz\">New Zealand</option>\n                    </select>\n                    \n                    <div className=\"submitContainer\">\n                        <input type=\"submit\" value=\"Set Filter\" />\n                        <FilterList />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default NewsFilters;","const apis = {\n    proxy: \"https://cors-anywhere.herokuapp.com/\",\n    tasteDive: {\n        endpoint: \"https://tastedive.com/api/similar\",\n        key: \"340706-JSAdvanc-LLV2T1V7\"\n    },\n    tmdb: {\n        endpoint: \"\",\n        key: \"e34f013ef15026439088cf9cdb94f352\"\n    },\n    omdb: {\n        endpoint: \"\",\n        key: \"f6517cf7\"\n    },\n    newsApi: {\n        endpoint: \"https://newsapi.org/v2/top-headlines\",\n        key: \"1dc0a571d9fa434c9fc2e4660a5bfc7a\"\n    },\n    aylien: {\n        endpoint: \"https://api.aylien.com/api/v1/sentiment\",\n        key: \"b519c52791149e1b2e0d5fe93c647572\",\n        id: \"2854d689\"\n    },\n    iex: {\n        endpoint: \"\",\n        publishedKey: \"Tpk_cc9c2f74e1444a69bd339d66448dad67\",\n        secretKey: \"Tsk_8422d9bf69844f37b6051afca8e83998\"\n    },\n    vantage: {\n        endpoint: \"\",\n        key: \"9TH8WYTBQHB1T0DS\"\n    }\n}\n\nexport default apis;","import React, {Component} from \"react\";\nimport NewsFilters from \"./NewsFilters.js\"; // This is a child component!\nimport axios from \"axios\";\nimport apis from \"../constants/apis.js\"; // Import object containing all API information\nimport CircularProgress from \"@material-ui/core/CircularProgress\"; // Import circular progress icon\n\nclass NewsFeed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            articles: [],\n            articlesWithSent: [],\n            avgSentiment: 50,\n            query: \"\",\n            country: \"\"\n        }\n    }\n    \n    // Upon initial page load, immediately fetch news articles from News API\n    componentDidMount() {\n        this.fetchNews();\n    }\n\n    // Performs 1 API call to News API and stores an array of the results in state\n    async fetchNews() {\n        try {\n            // 1. Fetch 20 News API articles using axios\n            const newsApiResults = await axios.get(`${apis.newsApi.endpoint}`, {\n                params: {\n                    apiKey: apis.newsApi.key,\n                    language: \"en\",\n                    pageSize: 20,\n                    q: this.state.query, // defaults to all topics\n                    country: this.state.country // defaults to all countries\n                }\n            });\n\n            // 2. Store an array of the articles using the data return from the API call in state (with setState)\n            this.setState({\n                articles: newsApiResults.data.articles,\n                articlesWithSent: [] // Hoping this would clear articles when setting a new filter... No luck\n            });\n\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    // When new information comes in, do one of the following:\n    // 1. If query or country has changed, fetch news articles again and start feed fresh\n    // NOTE: This doesn't seem to work right now... Still needs work\n    // 2. If there is still a backlog of articles to display on page AND 1 article was just removed from the backlog...\n    // then do it all over again with the next article in the backlog!\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.query !== prevState.query || this.state.country !== prevState.country) {\n            this.fetchNews();\n        } else if (this.state.articles.length && this.state.articles.length !== prevState.articles.length) {\n            this.articleSentimentSequence();\n        }\n    }\n\n    async articleSentimentSequence() {\n        try {\n            // For the newest article not rendered on page from News API...\n            // (News API sorts their array newest to oldest)\n            const targetArticle = this.state.articles[0];\n\n            // 1. Fetch sentiment data from Aylien using API call via axios\n            // Text passed into API for analysis is the headline title\n            const articleSentiment = await axios.get(`${apis.proxy + apis.aylien.endpoint}`, {\n                headers: {\n                    \"X-AYLIEN-TextAPI-Application-Key\": apis.aylien.key,\n                    \"X-AYLIEN-TextAPI-Application-ID\": apis.aylien.id\n                },\n                params: {\n                    mode: \"tweet\",\n                    text: targetArticle.title,\n                    language: \"en\"\n                }\n            });\n\n            // 2. Chain call the next method in the sequence\n            this.setStateArticles(targetArticle, articleSentiment);\n            \n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    // This chained method combines News API data with Aylien data\n    // Then \"moves\" the target article from one array in state to another array in state\n    setStateArticles(targetArticle, articleSentiment) {\n        // 1. Create combined object with all important data\n        const articleWithSent = {\n            title: targetArticle.title,\n            description: targetArticle.description,\n            source: targetArticle.source.name,\n            url: targetArticle.url,\n            image: targetArticle.urlToImage,\n            polarity: articleSentiment.data.polarity,\n            polarityConfidence: articleSentiment.data.polarity_confidence,\n            subjectivity: articleSentiment.data.subjectivity,\n            subjectivityConfidence: articleSentiment.data.subjectivity_confidence\n        }\n        \n        // 2. Create copy of current articles but WITHOUT the target article\n        const copyArticles = [...this.state.articles]; // destructures??\n        copyArticles.shift();\n        \n        // 3. Create copy of renderable articles array but with new combined article at the front of the line!\n        const copyArticlesWithSent = [...this.state.articlesWithSent]; // destructures??\n        copyArticlesWithSent.unshift(articleWithSent);\n\n        // 4. Get average sentiment/polarity of ALL articles currently in renderable articles array\n        const avgSentiment = this.getAvgSentiment(copyArticlesWithSent);\n\n        // 5. If this is the first article ever, immediately update state\n        // This will trigger a re-render instantly, allowing the article to show up on page right away\n        if (!this.state.articlesWithSent.length) {\n            this.setState({\n                articlesWithSent: copyArticlesWithSent,\n                articles: copyArticles,\n                avgSentiment: avgSentiment\n            });\n        // 6. Otherwise, wait 3 seconds before updating state and triggering a re-render\n        // This creates more of a slow drip user experience, giving users time to read the headlines\n        } else {\n            const timeoutId = setTimeout(() => {    \n                this.setState({\n                    articlesWithSent: copyArticlesWithSent,\n                    articles: copyArticles,\n                    avgSentiment: avgSentiment\n                });\n            }, 3000);\n        }\n    }\n\n    // This method maps through every renderable article (in this.state.articlesWithSent)\n    // And it returns JSX that can be rendered on page!\n    renderArticles() {\n        const renderedArticles = this.state.articlesWithSent.map((article, index) => {\n            return (\n                <div className=\"articleContainer\" key={this.state.articlesWithSent.length - index}>\n                    <a href={article.url} target=\"_blank\"></a>\n                    <div className=\"articleImage\">\n                        <img src={article.image} alt={article.description} />\n                    </div>\n                    <div className=\"articleInfo\">\n                        <h3>{article.title}</h3>\n                        <h4>{article.source}</h4>\n                    </div>\n                    <div className=\"articleSentiment\">\n                        <h3>\n                            Polarity: <br />\n                            <span className={article.polarity}>{article.polarity}</span>\n                        </h3>\n                        <h4>\n                            AI Confidence: <strong>{Math.floor(article.polarityConfidence * 100)}%</strong></h4>\n                    </div>\n                </div>\n            );\n        });\n    \n        return (\n            <div className=\"newsFeed\">\n                {renderedArticles}\n            </div>\n        );\n    }\n\n    // This method calculates the average sentiment of currently displayed articles\n    // However, the average is shifted for a range from 0 to 100\n    // 0 is negative, 50 is neutral, 100 is positive\n    // I chose 0-100 because I'm using that number for the needle position in the avg. polarity bar on page\n    getAvgSentiment(articles) {\n        // 1. Map through articles and convert to array of weighted values\n        // A positive article is worth 1, negative is -1, and neutral is 0\n        // These are weighted by confidence though, so you multiply by polarity confidence for true weight\n        const avgSentiment = articles.map(article => {\n            switch(article.polarity) {\n                case \"positive\":\n                    return 1 * article.polarityConfidence;\n                    break;\n                case \"negative\":\n                    return -1 * article.polarityConfidence;\n                    break;\n                default:\n                    return 0;\n            }\n        // 2. Add up all weighted values and divide by number of articles for average\n        // The range however is -1 to 1 right now, so...\n        // Multiply by 50 to create a range of -50 to 50\n        // Finally, shift range up 50 by adding 50, making range 0 to 100\n        // Perfect for my sentiment bar!\n        }).reduce((acc, cur) => {\n            return acc + cur;\n        }, 0) / articles.length * 50 + 50;\n\n        // 3. Return value\n        return avgSentiment;\n    }\n\n    renderEmptyState() {\n        return (\n            <div className=\"circularProgress\">\n                <CircularProgress color=\"#aaa\" />\n            </div>\n        )\n    }\n\n    // This method gets passed to NewsFilters component,\n    // so NewsFilter can update NewsFeed's state whenever filter is submitted!\n    onFilterSubmit = (query, country) => {\n        this.setState({\n          query: query,\n          country: country\n        });\n      }\n\n    render() {\n        return (\n            <main className=\"newsFeedComponent wrapper\">\n                <div className=\"sentimentBar\">\n                    <div className=\"avgSentiment\" style={{left: `${this.state.avgSentiment}%`}}></div>\n                    <p>Avg. Polarity</p>\n                </div>\n                <NewsFilters onFilterSubmit={this.onFilterSubmit} />\n                { this.state.articlesWithSent.length ? this.renderArticles() : this.renderEmptyState() }\n            </main>\n        );\n    }\n}\n\nexport default NewsFeed;","import React from \"react\";\n\nfunction Footer(props) {\n    return (\n        <footer className=\"footerComponent\">\n            <h3>Data kindly provided by:</h3>\n            <ul className=\"attributions\">\n                {props.attributions.map(attr => {\n                    return (\n                        <li><a href={attr.href}>{attr.name}</a></li>\n                    );\n                })}\n            </ul>\n            <p>Created by {props.author}</p>\n            <p><a href={props.githubUrl}>View GitHub Repo</a></p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Header from \"./components/Header.js\";\nimport NewsFeed from \"./components/NewsFeed.js\";\nimport Footer from \"./components/Footer.js\";\nimport \"./styles/styles.scss\"; // imports and applies all stylesheets\nimport \"normalize.css\"; // helps with ironing out issues rendering elements between browsers\n\nfunction App() {\n\n  return (\n    <div className=\"appComponent\">\n      <Header title=\"Polar News\" />\n      <NewsFeed />\n      <Footer attributions={[{name: \"News API\", href: \"https://newsapi.org/docs\"}, {name: \"Aylien\", href: \"https://docs.aylien.com/textapi\"}]} author=\"Dan Fitz\" githubUrl=\"https://github.com/danielfitz/polarNews\" />\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}